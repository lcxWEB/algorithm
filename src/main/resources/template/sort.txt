
快速排序：

class Solution {
    public int[] sortArray(int[] nums) {
        quickSort(nums, 0, nums.length - 1);
        return nums;
    }

    void quickSort(int[] arr, int l, int r) {
        if(l >= r) {
            return;
        }
        int pivot = arr[l];
        int i = l - 1;
        int j = r + 1;
        while(i < j) {
            do i++; while(arr[i] < pivot);
            do j--; while(arr[j] > pivot);
            if(i < j) {
                swap(arr, i, j);
            }
        }
        quickSort(arr, l, j);
        quickSort(arr, j+1, r);
    }

    void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}



归并排序：

class Solution {

    int[] temp;

    public int[] sortArray(int[] nums) {
        temp = new int[nums.length];
        mergeSort(nums, 0, nums.length - 1);
        return nums;
    }


    void mergeSort(int[] nums, int l, int r) {
        if(l >= r) {
            return;
        }
        int mid = l + r >> 1;
        mergeSort(nums, l, mid);
        mergeSort(nums, mid + 1, r);
        int k = 0, i = l, j = mid + 1;
        while (i <= mid && j <= r) {
            if(nums[i] <= nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }
        while(i <= mid) {
            temp[k++] = nums[i++];
        }
        while(j <= r) {
            temp[k++] = nums[j++];
        }
        for(i = l, j = 0; i <= r; i++, j++) {
            nums[i] = temp[j];
        }
    }
}